<script type="text/javascript">
(function attQuickBtnsPlugin() {
  // add the "Now" and "Start/End of Day" buttons to the ClockIn and ClockOut
  // input boxes within the contained form#dailydayform > fieldset

  var selDailyFrmFldst = "div#dailyClockInOutDialogTemplate form#dailydayform fieldset";

  var dictTimeEntryRows  = {
    "in":  "~[text:psx.jshtml.admin_students.attendance_clockinout.clock_in]",   // Clock In
    "out": "~[text:psx.jshtml.admin_students.attendance_clockinout.clock_out]"   // Clock Out
    // "in": "Clock In",
    // "out": "Clock Out"
  };

  var arrDailyTimes = new Array();
 
  // There's no GPV'able attendance_date value available on this page so
  // the TList_SQL need to be in seperate JSON file queried via AJAX after
  // scraping the date with jQuery
  function updateDailyTimesForDate(att_date) {
    // if att_date is can be parsed as a Date value, then
    // update arrDailyTimes for that date
    if (Date.parse(att_date)) {
      $j.ajax({
        type: 'POST',
        dataType: 'json',
        cache: 'false',
        url: '/admin/attendance/functions/attendancestatus.daily.QuickBtns.json',
        data: {
          "attendance_date": att_date
        },
        // TODO: refactor success as done
        success: function (data) {
          if (data.length > 0) {
            arrDailyTimes = data;
            // Remove the last object from the array, if it's empty
            if ($j.isEmptyObject(arrDailyTimes[arrDailyTimes.length - 1])) {
              arrDailyTimes.pop();
            }
          }
        },
        // TODO: refactor error as fail
        error: function () {
          // 'JSON error'  
        }
      });
    }
  }

  function setInputToTime(inputKey, timeVal) {
    if (dictTimeEntryRows.hasOwnProperty(inputKey)) {
      var elInputTime = $j(`${selDailyFrmFldst} div:has(label:contains(${dictTimeEntryRows[inputKey]})) input.timeEntry`);
      switch(timeVal) {
        case "now":
          $j(elInputTime).timeEntry('setTime', new Date());
          break;
        case "daystart":
          $j(elInputTime).timeEntry('setTime', new Date(0, 0, 0, arrDailyTimes[0].dtid_HH, arrDailyTimes[0].dtid_MI));
          break;
        case "dayend":
          $j(elInputTime).timeEntry('setTime', new Date(0, 0, 0, arrDailyTimes[0].dtod_HH, arrDailyTimes[0].dtod_MI));
          break;
      }
      // focus the cursor on the associated inputbox
      $j(elInputTime).focus()
    }
  }
  // using a cloneable template as changing the 'type' attribute of a button causes issues on IE
  var btnButtonTemplate = document.createRange().createContextualFragment('<button type="button"></button>').firstElementChild;
  btnButtonTemplate.setAttribute('class','attqckbttns');
  $j(btnButtonTemplate).css('width','13ex');   // TODO: Set button width based on the max length of their labels
  
  // By the time the clockInOutButton is rendered to the page, the dailyClockInOutDialogTemplate
  // has been fully loaded (hidden) in the drawerPane.  Set a delegated event handler for the
  // button to add the timeEntry buttons to the template.
  $j("body").on( "click", "button[name='clockInOutButton']", function( event ) {
    //alert("event triggered");

    var jsonDate = new Date();
    if (arrDailyTimes.length) {
      jsonDate = new Date(arrDailyTimes[0].date_val);
    }
    var formDate = new Date($j("form#dailyAttendanceContent input#dailyAttendanceDate").val());

    if ( (arrDailyTimes.length === 0) ||
         (jsonDate.toDateString() != formDate.toDateString()) ) {
      updateDailyTimesForDate($j("form#dailyAttendanceContent input#dailyAttendanceDate").val());
    }
 
    // add the buttons if they're not already there
    if ($j(`${selDailyFrmFldst} .qckbttns-row`).length === 0) {
 
      var btnTimeIn_Current = btnButtonTemplate.cloneNode();
      $j(btnTimeIn_Current).css('margin-left','1em');
      btnTimeIn_Current.innerText = "Current Time";
      btnTimeIn_Current.onclick = function() {setInputToTime("in", "now")};
      
      var btnTimeOut_Current = btnButtonTemplate.cloneNode();
      $j(btnTimeOut_Current).css('margin-left','1em');
      btnTimeOut_Current.innerText = "Current Time";
      btnTimeOut_Current.onclick = function() {setInputToTime("out", "now")};
      
      var btnTimeIn_DayStart = btnButtonTemplate.cloneNode();
      btnTimeIn_DayStart.innerText = "Start of Day";
      btnTimeIn_DayStart.onclick = function() {setInputToTime("in", "daystart")};
      
      var btnTimeIn_DayEnd = btnButtonTemplate.cloneNode();
      btnTimeIn_DayEnd.innerText = "End of Day";
      btnTimeIn_DayEnd.onclick = function() {setInputToTime("out", "dayend")};

      // Disable the Start/End_of_Day buttons if any of the following is true
      //  - arrDailyTimes is an empty array
      //  - arrDailyTimes[0] is an empty object
      //  - arrDailyTimes[0].dtid_HH, .dtid_MI, .dtod_HH, or .dtod_MI are empty keys
      if ( (arrDailyTimes.length == 0) ||
           ($j.isEmptyObject(arrDailyTimes[0])) ||
           (arrDailyTimes[0].dtid_HH == "") ||
           (arrDailyTimes[0].dtid_MI == "") ||
           (arrDailyTimes[0].dtod_MI == "") ||
           (arrDailyTimes[0].dtod_MI == "") ) {
        btnTimeIn_DayStart.disabled = "true";
        btnTimeIn_DayEnd.disabled = "true" ;
      }
      
      var fragQckBtnsRow_In = document.createDocumentFragment();
      fragQckBtnsRow_In.appendChild(document.createElement("span"));
      fragQckBtnsRow_In.firstElementChild.setAttribute('class','qckbttns-row');
      fragQckBtnsRow_In.firstElementChild.appendChild(btnTimeIn_Current);
      fragQckBtnsRow_In.firstElementChild.appendChild(btnTimeIn_DayStart);
      
      var fragQckBtnsRow_Out = document.createDocumentFragment();
      fragQckBtnsRow_Out.appendChild(document.createElement("span"));
      fragQckBtnsRow_Out.firstElementChild.setAttribute('class','qckbttns-row');
      fragQckBtnsRow_Out.firstElementChild.appendChild(btnTimeOut_Current);
      fragQckBtnsRow_Out.firstElementChild.appendChild(btnTimeIn_DayEnd);

      // reduce with of labels to 27% (stock is 35%) to make room for buttons
      $j(`${selDailyFrmFldst} label`).css('width','27%');

      // remove the example text from right of the input boxes
      $j(`${selDailyFrmFldst} div:has(label:contains(${dictTimeEntryRows['in']})) span:has(input.timeEntry)`).contents().filter(function(){return this.nodeType === 3;}).remove();
      $j(`${selDailyFrmFldst} div:has(label:contains(${dictTimeEntryRows['out']})) span:has(input.timeEntry)`).contents().filter(function(){return this.nodeType === 3;}).remove();
      $j(`${selDailyFrmFldst} div:has(label:contains(${dictTimeEntryRows['in']})) span:has(input.timeEntry)`).contents().last().after(fragQckBtnsRow_In);
      $j(`${selDailyFrmFldst} div:has(label:contains(${dictTimeEntryRows['out']})) span:has(input.timeEntry)`).contents().last().after(fragQckBtnsRow_Out);
    }
  });
})();
</script>